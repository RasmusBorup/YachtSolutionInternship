#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YachtSolution.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Technical Yacht Solution")]
	public partial class DatabaseTableDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDBImage(DBImage instance);
    partial void UpdateDBImage(DBImage instance);
    partial void DeleteDBImage(DBImage instance);
    partial void InsertTab(Tab instance);
    partial void UpdateTab(Tab instance);
    partial void DeleteTab(Tab instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertLogBook(LogBook instance);
    partial void UpdateLogBook(LogBook instance);
    partial void DeleteLogBook(LogBook instance);
    partial void InsertLogItem(LogItem instance);
    partial void UpdateLogItem(LogItem instance);
    partial void DeleteLogItem(LogItem instance);
    partial void InsertLogItemReading(LogItemReading instance);
    partial void UpdateLogItemReading(LogItemReading instance);
    partial void DeleteLogItemReading(LogItemReading instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoleTab(RoleTab instance);
    partial void UpdateRoleTab(RoleTab instance);
    partial void DeleteRoleTab(RoleTab instance);
    partial void InsertSubGroup(SubGroup instance);
    partial void UpdateSubGroup(SubGroup instance);
    partial void DeleteSubGroup(SubGroup instance);
    #endregion
		
		public DatabaseTableDataContext() : 
				base(global::YachtSolution.Properties.Settings.Default.Technical_Yacht_SolutionConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseTableDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseTableDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseTableDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseTableDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DBImage> DBImages
		{
			get
			{
				return this.GetTable<DBImage>();
			}
		}
		
		public System.Data.Linq.Table<Tab> Tabs
		{
			get
			{
				return this.GetTable<Tab>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<LogBook> LogBooks
		{
			get
			{
				return this.GetTable<LogBook>();
			}
		}
		
		public System.Data.Linq.Table<LogItem> LogItems
		{
			get
			{
				return this.GetTable<LogItem>();
			}
		}
		
		public System.Data.Linq.Table<LogItemReading> LogItemReadings
		{
			get
			{
				return this.GetTable<LogItemReading>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RoleTab> RoleTabs
		{
			get
			{
				return this.GetTable<RoleTab>();
			}
		}
		
		public System.Data.Linq.Table<SubGroup> SubGroups
		{
			get
			{
				return this.GetTable<SubGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DBImage")]
	public partial class DBImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private System.Data.Linq.Binary _Image;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    #endregion
		
		public DBImage()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBImage_Employee", Storage="_Employees", ThisKey="ImageID", OtherKey="photo")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBImage_Inventory", Storage="_Inventories", ThisKey="ImageID", OtherKey="photodoc")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBImage_Job", Storage="_Jobs", ThisKey="ImageID", OtherKey="photo")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DBImage = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DBImage = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.DBImage = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.DBImage = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.DBImage = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.DBImage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tabs")]
	public partial class Tab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _tab1;
		
		private EntitySet<RoleTab> _RoleTabs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontab1Changing(string value);
    partial void Ontab1Changed();
    #endregion
		
		public Tab()
		{
			this._RoleTabs = new EntitySet<RoleTab>(new Action<RoleTab>(this.attach_RoleTabs), new Action<RoleTab>(this.detach_RoleTabs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="tab", Storage="_tab1", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string tab1
		{
			get
			{
				return this._tab1;
			}
			set
			{
				if ((this._tab1 != value))
				{
					this.Ontab1Changing(value);
					this.SendPropertyChanging();
					this._tab1 = value;
					this.SendPropertyChanged("tab1");
					this.Ontab1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tab_RoleTab", Storage="_RoleTabs", ThisKey="tab1", OtherKey="tabName")]
		public EntitySet<RoleTab> RoleTabs
		{
			get
			{
				return this._RoleTabs;
			}
			set
			{
				this._RoleTabs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleTabs(RoleTab entity)
		{
			this.SendPropertyChanging();
			entity.Tab = this;
		}
		
		private void detach_RoleTabs(RoleTab entity)
		{
			this.SendPropertyChanging();
			entity.Tab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOfEmployee;
		
		private string _name;
		
		private string _jobTitle;
		
		private string _jobEmail;
		
		private string _jobPhone;
		
		private string _ssn;
		
		private double _salary;
		
		private System.Nullable<int> _photo;
		
		private string _userName;
		
		private string _passWord;
		
		private EntityRef<DBImage> _DBImage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOfEmployeeChanging(int value);
    partial void OnidOfEmployeeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnjobTitleChanging(string value);
    partial void OnjobTitleChanged();
    partial void OnjobEmailChanging(string value);
    partial void OnjobEmailChanged();
    partial void OnjobPhoneChanging(string value);
    partial void OnjobPhoneChanged();
    partial void OnssnChanging(string value);
    partial void OnssnChanged();
    partial void OnsalaryChanging(double value);
    partial void OnsalaryChanged();
    partial void OnphotoChanging(System.Nullable<int> value);
    partial void OnphotoChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpassWordChanging(string value);
    partial void OnpassWordChanged();
    #endregion
		
		public Employee()
		{
			this._DBImage = default(EntityRef<DBImage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOfEmployee", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idOfEmployee
		{
			get
			{
				return this._idOfEmployee;
			}
			set
			{
				if ((this._idOfEmployee != value))
				{
					this.OnidOfEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idOfEmployee = value;
					this.SendPropertyChanged("idOfEmployee");
					this.OnidOfEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobTitle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string jobTitle
		{
			get
			{
				return this._jobTitle;
			}
			set
			{
				if ((this._jobTitle != value))
				{
					this.OnjobTitleChanging(value);
					this.SendPropertyChanging();
					this._jobTitle = value;
					this.SendPropertyChanged("jobTitle");
					this.OnjobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string jobEmail
		{
			get
			{
				return this._jobEmail;
			}
			set
			{
				if ((this._jobEmail != value))
				{
					this.OnjobEmailChanging(value);
					this.SendPropertyChanging();
					this._jobEmail = value;
					this.SendPropertyChanged("jobEmail");
					this.OnjobEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobPhone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string jobPhone
		{
			get
			{
				return this._jobPhone;
			}
			set
			{
				if ((this._jobPhone != value))
				{
					this.OnjobPhoneChanging(value);
					this.SendPropertyChanging();
					this._jobPhone = value;
					this.SendPropertyChanged("jobPhone");
					this.OnjobPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssn", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ssn
		{
			get
			{
				return this._ssn;
			}
			set
			{
				if ((this._ssn != value))
				{
					this.OnssnChanging(value);
					this.SendPropertyChanging();
					this._ssn = value;
					this.SendPropertyChanged("ssn");
					this.OnssnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Float NOT NULL")]
		public double salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="Int")]
		public System.Nullable<int> photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					if (this._DBImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(50)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passWord", DbType="VarChar(50)")]
		public string passWord
		{
			get
			{
				return this._passWord;
			}
			set
			{
				if ((this._passWord != value))
				{
					this.OnpassWordChanging(value);
					this.SendPropertyChanging();
					this._passWord = value;
					this.SendPropertyChanged("passWord");
					this.OnpassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBImage_Employee", Storage="_DBImage", ThisKey="photo", OtherKey="ImageID", IsForeignKey=true)]
		public DBImage DBImage
		{
			get
			{
				return this._DBImage.Entity;
			}
			set
			{
				DBImage previousValue = this._DBImage.Entity;
				if (((previousValue != value) 
							|| (this._DBImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBImage.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._DBImage.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._photo = value.ImageID;
					}
					else
					{
						this._photo = default(Nullable<int>);
					}
					this.SendPropertyChanged("DBImage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private int _amount;
		
		private string _description;
		
		private double _price;
		
		private int _minimumAmount;
		
		private string _location;
		
		private string _manufacturer;
		
		private string _serialNr;
		
		private System.Nullable<int> _photodoc;
		
		private string _partFor;
		
		private string _suppliers;
		
		private string _role;
		
		private EntityRef<DBImage> _DBImage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnminimumAmountChanging(int value);
    partial void OnminimumAmountChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnmanufacturerChanging(string value);
    partial void OnmanufacturerChanged();
    partial void OnserialNrChanging(string value);
    partial void OnserialNrChanged();
    partial void OnphotodocChanging(System.Nullable<int> value);
    partial void OnphotodocChanged();
    partial void OnpartForChanging(string value);
    partial void OnpartForChanged();
    partial void OnsuppliersChanging(string value);
    partial void OnsuppliersChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public Inventory()
		{
			this._DBImage = default(EntityRef<DBImage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minimumAmount", DbType="Int NOT NULL")]
		public int minimumAmount
		{
			get
			{
				return this._minimumAmount;
			}
			set
			{
				if ((this._minimumAmount != value))
				{
					this.OnminimumAmountChanging(value);
					this.SendPropertyChanging();
					this._minimumAmount = value;
					this.SendPropertyChanged("minimumAmount");
					this.OnminimumAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manufacturer", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string manufacturer
		{
			get
			{
				return this._manufacturer;
			}
			set
			{
				if ((this._manufacturer != value))
				{
					this.OnmanufacturerChanging(value);
					this.SendPropertyChanging();
					this._manufacturer = value;
					this.SendPropertyChanged("manufacturer");
					this.OnmanufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serialNr", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string serialNr
		{
			get
			{
				return this._serialNr;
			}
			set
			{
				if ((this._serialNr != value))
				{
					this.OnserialNrChanging(value);
					this.SendPropertyChanging();
					this._serialNr = value;
					this.SendPropertyChanged("serialNr");
					this.OnserialNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photodoc", DbType="Int")]
		public System.Nullable<int> photodoc
		{
			get
			{
				return this._photodoc;
			}
			set
			{
				if ((this._photodoc != value))
				{
					if (this._DBImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphotodocChanging(value);
					this.SendPropertyChanging();
					this._photodoc = value;
					this.SendPropertyChanged("photodoc");
					this.OnphotodocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partFor", DbType="VarChar(255)")]
		public string partFor
		{
			get
			{
				return this._partFor;
			}
			set
			{
				if ((this._partFor != value))
				{
					this.OnpartForChanging(value);
					this.SendPropertyChanging();
					this._partFor = value;
					this.SendPropertyChanged("partFor");
					this.OnpartForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suppliers", DbType="VarChar(MAX)")]
		public string suppliers
		{
			get
			{
				return this._suppliers;
			}
			set
			{
				if ((this._suppliers != value))
				{
					this.OnsuppliersChanging(value);
					this.SendPropertyChanging();
					this._suppliers = value;
					this.SendPropertyChanged("suppliers");
					this.OnsuppliersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBImage_Inventory", Storage="_DBImage", ThisKey="photodoc", OtherKey="ImageID", IsForeignKey=true)]
		public DBImage DBImage
		{
			get
			{
				return this._DBImage.Entity;
			}
			set
			{
				DBImage previousValue = this._DBImage.Entity;
				if (((previousValue != value) 
							|| (this._DBImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBImage.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._DBImage.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._photodoc = value.ImageID;
					}
					else
					{
						this._photodoc = default(Nullable<int>);
					}
					this.SendPropertyChanged("DBImage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _title;
		
		private string _description;
		
		private string _role;
		
		private int _timeBetweenJobs;
		
		private System.DateTime _date;
		
		private string _note;
		
		private System.Nullable<int> _workerID;
		
		private System.Nullable<int> _photo;
		
		private bool _done;
		
		private int _id;
		
		private int _routineId;
		
		private string _nameOfEmployee;
		
		private string _subGroup;
		
		private string _logItem;
		
		private bool _inDays;
		
		private bool _isTemplate;
		
		private EntityRef<DBImage> _DBImage;
		
		private EntityRef<LogItem> _LogItem1;
		
		private EntityRef<SubGroup> _SubGroup1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OntimeBetweenJobsChanging(int value);
    partial void OntimeBetweenJobsChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnworkerIDChanging(System.Nullable<int> value);
    partial void OnworkerIDChanged();
    partial void OnphotoChanging(System.Nullable<int> value);
    partial void OnphotoChanged();
    partial void OndoneChanging(bool value);
    partial void OndoneChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnroutineIdChanging(int value);
    partial void OnroutineIdChanged();
    partial void OnnameOfEmployeeChanging(string value);
    partial void OnnameOfEmployeeChanged();
    partial void OnsubGroupChanging(string value);
    partial void OnsubGroupChanged();
    partial void OnlogItemChanging(string value);
    partial void OnlogItemChanged();
    partial void OninDaysChanging(bool value);
    partial void OninDaysChanged();
    partial void OnisTemplateChanging(bool value);
    partial void OnisTemplateChanged();
    #endregion
		
		public Job()
		{
			this._DBImage = default(EntityRef<DBImage>);
			this._LogItem1 = default(EntityRef<LogItem>);
			this._SubGroup1 = default(EntityRef<SubGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(15)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeBetweenJobs", DbType="Int NOT NULL")]
		public int timeBetweenJobs
		{
			get
			{
				return this._timeBetweenJobs;
			}
			set
			{
				if ((this._timeBetweenJobs != value))
				{
					this.OntimeBetweenJobsChanging(value);
					this.SendPropertyChanging();
					this._timeBetweenJobs = value;
					this.SendPropertyChanged("timeBetweenJobs");
					this.OntimeBetweenJobsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="VarChar(2000)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workerID", DbType="Int")]
		public System.Nullable<int> workerID
		{
			get
			{
				return this._workerID;
			}
			set
			{
				if ((this._workerID != value))
				{
					this.OnworkerIDChanging(value);
					this.SendPropertyChanging();
					this._workerID = value;
					this.SendPropertyChanged("workerID");
					this.OnworkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="Int")]
		public System.Nullable<int> photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					if (this._DBImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_done", DbType="Bit NOT NULL")]
		public bool done
		{
			get
			{
				return this._done;
			}
			set
			{
				if ((this._done != value))
				{
					this.OndoneChanging(value);
					this.SendPropertyChanging();
					this._done = value;
					this.SendPropertyChanged("done");
					this.OndoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routineId", DbType="Int NOT NULL")]
		public int routineId
		{
			get
			{
				return this._routineId;
			}
			set
			{
				if ((this._routineId != value))
				{
					this.OnroutineIdChanging(value);
					this.SendPropertyChanging();
					this._routineId = value;
					this.SendPropertyChanged("routineId");
					this.OnroutineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameOfEmployee", DbType="VarChar(50)")]
		public string nameOfEmployee
		{
			get
			{
				return this._nameOfEmployee;
			}
			set
			{
				if ((this._nameOfEmployee != value))
				{
					this.OnnameOfEmployeeChanging(value);
					this.SendPropertyChanging();
					this._nameOfEmployee = value;
					this.SendPropertyChanged("nameOfEmployee");
					this.OnnameOfEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subGroup", DbType="VarChar(50)")]
		public string subGroup
		{
			get
			{
				return this._subGroup;
			}
			set
			{
				if ((this._subGroup != value))
				{
					if (this._SubGroup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubGroupChanging(value);
					this.SendPropertyChanging();
					this._subGroup = value;
					this.SendPropertyChanged("subGroup");
					this.OnsubGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logItem", DbType="VarChar(255)")]
		public string logItem
		{
			get
			{
				return this._logItem;
			}
			set
			{
				if ((this._logItem != value))
				{
					if (this._LogItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogItemChanging(value);
					this.SendPropertyChanging();
					this._logItem = value;
					this.SendPropertyChanged("logItem");
					this.OnlogItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inDays", DbType="Bit NOT NULL")]
		public bool inDays
		{
			get
			{
				return this._inDays;
			}
			set
			{
				if ((this._inDays != value))
				{
					this.OninDaysChanging(value);
					this.SendPropertyChanging();
					this._inDays = value;
					this.SendPropertyChanged("inDays");
					this.OninDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTemplate", DbType="Bit NOT NULL")]
		public bool isTemplate
		{
			get
			{
				return this._isTemplate;
			}
			set
			{
				if ((this._isTemplate != value))
				{
					this.OnisTemplateChanging(value);
					this.SendPropertyChanging();
					this._isTemplate = value;
					this.SendPropertyChanged("isTemplate");
					this.OnisTemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBImage_Job", Storage="_DBImage", ThisKey="photo", OtherKey="ImageID", IsForeignKey=true)]
		public DBImage DBImage
		{
			get
			{
				return this._DBImage.Entity;
			}
			set
			{
				DBImage previousValue = this._DBImage.Entity;
				if (((previousValue != value) 
							|| (this._DBImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBImage.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._DBImage.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._photo = value.ImageID;
					}
					else
					{
						this._photo = default(Nullable<int>);
					}
					this.SendPropertyChanged("DBImage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogItem_Job", Storage="_LogItem1", ThisKey="logItem", OtherKey="logItem1", IsForeignKey=true)]
		public LogItem LogItem1
		{
			get
			{
				return this._LogItem1.Entity;
			}
			set
			{
				LogItem previousValue = this._LogItem1.Entity;
				if (((previousValue != value) 
							|| (this._LogItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogItem1.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._LogItem1.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._logItem = value.logItem1;
					}
					else
					{
						this._logItem = default(string);
					}
					this.SendPropertyChanged("LogItem1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroup_Job", Storage="_SubGroup1", ThisKey="subGroup", OtherKey="name", IsForeignKey=true)]
		public SubGroup SubGroup1
		{
			get
			{
				return this._SubGroup1.Entity;
			}
			set
			{
				SubGroup previousValue = this._SubGroup1.Entity;
				if (((previousValue != value) 
							|| (this._SubGroup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubGroup1.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._SubGroup1.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._subGroup = value.name;
					}
					else
					{
						this._subGroup = default(string);
					}
					this.SendPropertyChanged("SubGroup1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogBook")]
	public partial class LogBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _date;
		
		private string _description;
		
		private string _remarks;
		
		private string _chiefEngineer;
		
		private EntitySet<LogItemReading> _LogItemReadings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnremarksChanging(string value);
    partial void OnremarksChanged();
    partial void OnchiefEngineerChanging(string value);
    partial void OnchiefEngineerChanged();
    #endregion
		
		public LogBook()
		{
			this._LogItemReadings = new EntitySet<LogItemReading>(new Action<LogItemReading>(this.attach_LogItemReadings), new Action<LogItemReading>(this.detach_LogItemReadings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remarks", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string remarks
		{
			get
			{
				return this._remarks;
			}
			set
			{
				if ((this._remarks != value))
				{
					this.OnremarksChanging(value);
					this.SendPropertyChanging();
					this._remarks = value;
					this.SendPropertyChanged("remarks");
					this.OnremarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chiefEngineer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string chiefEngineer
		{
			get
			{
				return this._chiefEngineer;
			}
			set
			{
				if ((this._chiefEngineer != value))
				{
					this.OnchiefEngineerChanging(value);
					this.SendPropertyChanging();
					this._chiefEngineer = value;
					this.SendPropertyChanged("chiefEngineer");
					this.OnchiefEngineerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogBook_LogItemReading", Storage="_LogItemReadings", ThisKey="date", OtherKey="date")]
		public EntitySet<LogItemReading> LogItemReadings
		{
			get
			{
				return this._LogItemReadings;
			}
			set
			{
				this._LogItemReadings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogItemReadings(LogItemReading entity)
		{
			this.SendPropertyChanging();
			entity.LogBook = this;
		}
		
		private void detach_LogItemReadings(LogItemReading entity)
		{
			this.SendPropertyChanging();
			entity.LogBook = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogItem")]
	public partial class LogItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _logItem1;
		
		private string _unitOfMeasurement;
		
		private string _description;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<LogItemReading> _LogItemReadings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlogItem1Changing(string value);
    partial void OnlogItem1Changed();
    partial void OnunitOfMeasurementChanging(string value);
    partial void OnunitOfMeasurementChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public LogItem()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._LogItemReadings = new EntitySet<LogItemReading>(new Action<LogItemReading>(this.attach_LogItemReadings), new Action<LogItemReading>(this.detach_LogItemReadings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="logItem", Storage="_logItem1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string logItem1
		{
			get
			{
				return this._logItem1;
			}
			set
			{
				if ((this._logItem1 != value))
				{
					this.OnlogItem1Changing(value);
					this.SendPropertyChanging();
					this._logItem1 = value;
					this.SendPropertyChanged("logItem1");
					this.OnlogItem1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unitOfMeasurement", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string unitOfMeasurement
		{
			get
			{
				return this._unitOfMeasurement;
			}
			set
			{
				if ((this._unitOfMeasurement != value))
				{
					this.OnunitOfMeasurementChanging(value);
					this.SendPropertyChanging();
					this._unitOfMeasurement = value;
					this.SendPropertyChanged("unitOfMeasurement");
					this.OnunitOfMeasurementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogItem_Job", Storage="_Jobs", ThisKey="logItem1", OtherKey="logItem")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogItem_LogItemReading", Storage="_LogItemReadings", ThisKey="logItem1", OtherKey="logItem")]
		public EntitySet<LogItemReading> LogItemReadings
		{
			get
			{
				return this._LogItemReadings;
			}
			set
			{
				this._LogItemReadings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.LogItem1 = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.LogItem1 = null;
		}
		
		private void attach_LogItemReadings(LogItemReading entity)
		{
			this.SendPropertyChanging();
			entity.LogItem1 = this;
		}
		
		private void detach_LogItemReadings(LogItemReading entity)
		{
			this.SendPropertyChanging();
			entity.LogItem1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogItemReading")]
	public partial class LogItemReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _date;
		
		private string _logItem;
		
		private double _todaysReading;
		
		private double _yesterdaysReading;
		
		private double _difference;
		
		private EntityRef<LogBook> _LogBook;
		
		private EntityRef<LogItem> _LogItem1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnlogItemChanging(string value);
    partial void OnlogItemChanged();
    partial void OntodaysReadingChanging(double value);
    partial void OntodaysReadingChanged();
    partial void OnyesterdaysReadingChanging(double value);
    partial void OnyesterdaysReadingChanged();
    partial void OndifferenceChanging(double value);
    partial void OndifferenceChanged();
    #endregion
		
		public LogItemReading()
		{
			this._LogBook = default(EntityRef<LogBook>);
			this._LogItem1 = default(EntityRef<LogItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					if (this._LogBook.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logItem", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string logItem
		{
			get
			{
				return this._logItem;
			}
			set
			{
				if ((this._logItem != value))
				{
					if (this._LogItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogItemChanging(value);
					this.SendPropertyChanging();
					this._logItem = value;
					this.SendPropertyChanged("logItem");
					this.OnlogItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_todaysReading", DbType="Float NOT NULL")]
		public double todaysReading
		{
			get
			{
				return this._todaysReading;
			}
			set
			{
				if ((this._todaysReading != value))
				{
					this.OntodaysReadingChanging(value);
					this.SendPropertyChanging();
					this._todaysReading = value;
					this.SendPropertyChanged("todaysReading");
					this.OntodaysReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yesterdaysReading", DbType="Float NOT NULL")]
		public double yesterdaysReading
		{
			get
			{
				return this._yesterdaysReading;
			}
			set
			{
				if ((this._yesterdaysReading != value))
				{
					this.OnyesterdaysReadingChanging(value);
					this.SendPropertyChanging();
					this._yesterdaysReading = value;
					this.SendPropertyChanged("yesterdaysReading");
					this.OnyesterdaysReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_difference", DbType="Float NOT NULL")]
		public double difference
		{
			get
			{
				return this._difference;
			}
			set
			{
				if ((this._difference != value))
				{
					this.OndifferenceChanging(value);
					this.SendPropertyChanging();
					this._difference = value;
					this.SendPropertyChanged("difference");
					this.OndifferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogBook_LogItemReading", Storage="_LogBook", ThisKey="date", OtherKey="date", IsForeignKey=true)]
		public LogBook LogBook
		{
			get
			{
				return this._LogBook.Entity;
			}
			set
			{
				LogBook previousValue = this._LogBook.Entity;
				if (((previousValue != value) 
							|| (this._LogBook.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogBook.Entity = null;
						previousValue.LogItemReadings.Remove(this);
					}
					this._LogBook.Entity = value;
					if ((value != null))
					{
						value.LogItemReadings.Add(this);
						this._date = value.date;
					}
					else
					{
						this._date = default(System.DateTime);
					}
					this.SendPropertyChanged("LogBook");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogItem_LogItemReading", Storage="_LogItem1", ThisKey="logItem", OtherKey="logItem1", IsForeignKey=true)]
		public LogItem LogItem1
		{
			get
			{
				return this._LogItem1.Entity;
			}
			set
			{
				LogItem previousValue = this._LogItem1.Entity;
				if (((previousValue != value) 
							|| (this._LogItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogItem1.Entity = null;
						previousValue.LogItemReadings.Remove(this);
					}
					this._LogItem1.Entity = value;
					if ((value != null))
					{
						value.LogItemReadings.Add(this);
						this._logItem = value.logItem1;
					}
					else
					{
						this._logItem = default(string);
					}
					this.SendPropertyChanged("LogItem1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _role1;
		
		private EntitySet<RoleTab> _RoleTabs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrole1Changing(string value);
    partial void Onrole1Changed();
    #endregion
		
		public Role()
		{
			this._RoleTabs = new EntitySet<RoleTab>(new Action<RoleTab>(this.attach_RoleTabs), new Action<RoleTab>(this.detach_RoleTabs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="role", Storage="_role1", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string role1
		{
			get
			{
				return this._role1;
			}
			set
			{
				if ((this._role1 != value))
				{
					this.Onrole1Changing(value);
					this.SendPropertyChanging();
					this._role1 = value;
					this.SendPropertyChanged("role1");
					this.Onrole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleTab", Storage="_RoleTabs", ThisKey="role1", OtherKey="role")]
		public EntitySet<RoleTab> RoleTabs
		{
			get
			{
				return this._RoleTabs;
			}
			set
			{
				this._RoleTabs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleTabs(RoleTab entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_RoleTabs(RoleTab entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleTabs")]
	public partial class RoleTab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _tabName;
		
		private string _role;
		
		private int _id;
		
		private EntityRef<Role> _Role1;
		
		private EntityRef<Tab> _Tab;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntabNameChanging(string value);
    partial void OntabNameChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public RoleTab()
		{
			this._Role1 = default(EntityRef<Role>);
			this._Tab = default(EntityRef<Tab>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tabName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string tabName
		{
			get
			{
				return this._tabName;
			}
			set
			{
				if ((this._tabName != value))
				{
					if (this._Tab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntabNameChanging(value);
					this.SendPropertyChanging();
					this._tabName = value;
					this.SendPropertyChanged("tabName");
					this.OntabNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleTab", Storage="_Role1", ThisKey="role", OtherKey="role1", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.RoleTabs.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.RoleTabs.Add(this);
						this._role = value.role1;
					}
					else
					{
						this._role = default(string);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tab_RoleTab", Storage="_Tab", ThisKey="tabName", OtherKey="tab1", IsForeignKey=true)]
		public Tab Tab
		{
			get
			{
				return this._Tab.Entity;
			}
			set
			{
				Tab previousValue = this._Tab.Entity;
				if (((previousValue != value) 
							|| (this._Tab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tab.Entity = null;
						previousValue.RoleTabs.Remove(this);
					}
					this._Tab.Entity = value;
					if ((value != null))
					{
						value.RoleTabs.Add(this);
						this._tabName = value.tab1;
					}
					else
					{
						this._tabName = default(string);
					}
					this.SendPropertyChanged("Tab");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubGroup")]
	public partial class SubGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public SubGroup()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubGroup_Job", Storage="_Jobs", ThisKey="name", OtherKey="subGroup")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.SubGroup1 = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.SubGroup1 = null;
		}
	}
}
#pragma warning restore 1591
